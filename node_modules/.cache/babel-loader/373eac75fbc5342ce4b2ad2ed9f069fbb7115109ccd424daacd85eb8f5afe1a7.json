{"ast":null,"code":"var _jsxFileName = \"/Users/dezloredo/Desktop/spending-monitor/src/components/NewExpense/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n  // const[userInput, setUserInput] = useState({\n  //   enteredTitle: '',\n  //   enteredAmount: '',\n  //   enteredDate: ''\n  // }); Creating one state will result in handlers depending on that state, so other values would be lost\n  // if we are not updating the state (which can be done using the spread operator ...userInput, or prevState)\n\n  // const titleChangeHandler = (event) => {\n  //   setEnteredTitle(event.target.value);\n  //   // setUserInput((prevState) => {\n  //   //   return {...prevState, enteredTitle: event.target.value}\n  //   // });\n  // };\n  // const amountChangeHandler = (event) => {\n  //   setEnteredAmount(event.target.value);\n  // };\n  // const dateChangeHandler = (event) => {\n  //   setEnteredDate(event.target.value);\n  // };\n\n  const inputChangeHandler = (identifier, value) => {\n    if (identifier === 'title') {\n      setEnteredTitle(value);\n    } else if (identifier === 'amount') {\n      setEnteredAmount(value);\n    } else if (identifier === 'date') {\n      setEnteredDate(value);\n    }\n    ;\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: event => inputChangeHandler('title', event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: event => inputChangeHandler('amount', event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          step: \"2025-12-31\",\n          onChange: event => inputChangeHandler('date', event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ExpenseForm","_s","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","inputChangeHandler","identifier","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","event","target","min","step","_c","$RefreshReg$"],"sources":["/Users/dezloredo/Desktop/spending-monitor/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./ExpenseForm.css\";\n\nconst ExpenseForm = () => {\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n  // const[userInput, setUserInput] = useState({\n  //   enteredTitle: '',\n  //   enteredAmount: '',\n  //   enteredDate: ''\n  // }); Creating one state will result in handlers depending on that state, so other values would be lost\n  // if we are not updating the state (which can be done using the spread operator ...userInput, or prevState)\n\n  // const titleChangeHandler = (event) => {\n  //   setEnteredTitle(event.target.value);\n  //   // setUserInput((prevState) => {\n  //   //   return {...prevState, enteredTitle: event.target.value}\n  //   // });\n  // };\n  // const amountChangeHandler = (event) => {\n  //   setEnteredAmount(event.target.value);\n  // };\n  // const dateChangeHandler = (event) => {\n  //   setEnteredDate(event.target.value);\n  // };\n\n  const inputChangeHandler = (identifier, value) => {\n    if (identifier === 'title') {\n      setEnteredTitle(value);\n    } else if (identifier === 'amount') {\n      setEnteredAmount(value);\n    }  else if (identifier === 'date') {\n      setEnteredDate(value);\n    };\n  };\n\n  return (\n    <form>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input type=\"text\" onChange={(event) => inputChangeHandler('title', event.target.value)} />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input type=\"number\" min=\"0.01\" step=\"0.01\" onChange={(event) => inputChangeHandler('amount', event.target.value)} />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input type=\"date\" min=\"2019-01-01\" step=\"2025-12-31\" onChange={(event) => inputChangeHandler('date', event.target.value)} />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\n\nexport default ExpenseForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}